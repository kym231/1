for 문: 반복문
반복문: 지정한 범위에 해당하는 만큼 명령문을 반복해서 실행
        짧은 코드로 반복되는 명령 실행 가능
for 문의 원리: 복합 데이터형을 반복 범위로 지정해서 그 원소를 순서대로 반복 변수에 대입하고 명령문 실행
반복 범위는 in 연산자를 사용하여 주로 range 함수에 시작값, 종료값, 증가값을 설정해서 사용
for 문의 구조: for 변수 in range(시작값, 종료값+1, 증가값)

#for 문을 이용해서 0~10까지 출력
for i in range(0,11):
print(i)
->0 1 2 3 4 5 6 7 8 9 10

#for 문을 이용해서 0부터 10까지의 2의 배수 출력
for i in range(0,11,2):
print(i)
0 2 4 6 8 10

#for 문을 이용해서 2단 출력
for i in range(0,11,2):
print(i)
-> 2*1=2 2*2=4 2*3=6 ... 2*9=18

#for 문을 이용해서 구구단 출력
for i in range(2,10) =>(단)
for j in range(1,10) =>(*j)
print(i, "*", j, "=")


함수의 개념: 어떤 작업을 편하게 하기 위해 미리 지정된 명령문
함수의 장점: 동일하게 반복해야 하는 작업을 함수로 만들어 사용하면 편리함
함수의 사용 방법: 파이썬에서 제공하는 내장 함수를 사용하거나 또는 사용자가 정의해서 사용 가능
함수의 형태:
-인자(처리할 입력값)을 받아서 처리하여 결과값으로 반환
-def 예약어 사용
-함수명 다음에는 반드시 괄호와 콜론이 필요
-괄호안 인자값을 쉼표로 구분하여 입력
=> def 함수명(인자,인자):
      return 반환값


#두개의 변수를 받아 합계 출력하는 사용자 함수 생성
def add(a,b)
c=a+b
return c

var1=10
var2=20
for i in range(0,3):
result=add(var1+(i*10), var2+(i*10))
print(result)
->30 50 70


판다스: 데이터를 조작하고 분석하는데 사용하는 파이썬 라이브러리
판다스의 특징: 
-데이터를 표 형태로 분석할 수 있음
-시리즈와 데이터프레임 이라는 두 가지 데이터형 사용
시리즈는 표의 열, 데이터프레임은 행과 열이 있음


#판다스 사용하기
import pandas as pd

sr=pd.Series([1,2,3,4,5])
sr
->    0
   0  1
   1  2
   2  3
   3  4
   4  5
   

#데이터 프레임 만들기
df=pd.DataFrame([1,2,3,4,5])
df
=>여러개의 열로 2차원 배열형식이고 액셀시트와 그래프 정보를 얻을 수 있다


#예시
df['player']=['sonny', 'lee', 'kim', 'hwang', 'park']
df
->     0   player  (액셀시트)
   0   1   sonny   (그래프)
   1   2   lee     ()
   2   3   kim
   3   4   hwang
   4   5   park
   


